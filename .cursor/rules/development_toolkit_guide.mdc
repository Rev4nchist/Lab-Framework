---
description: Comprehensive MCP tool usage guide with performance-driven selection strategies
globs: **
alwaysApply: true
---

# üß∞ Development Toolkit Guide - MCP Tools & Integrations

> Battle-tested patterns for optimal tool selection and integration based on comprehensive performance testing

## üéØ Tool Selection Decision Tree

### Phase-Based Tool Selection Strategy

```mermaid
graph TD
    A[Start] --> B{Development Phase?}
    B -->|Planning| C[TaskMaster + Context7 + Memory MCP]
    B -->|Implementation| D[Desktop Commander + Context7 + BrowserBase]
    B -->|Debugging| E[BrowserBase + Desktop Commander + Memory MCP]
    B -->|Documentation| F[Context7 + Memory MCP + GitHub MCP]
```

### Tool Performance Rankings (95% Success Rate Achieved)

| Tool Category | Primary Choice | Fallback | Performance |
|---------------|----------------|----------|-------------|
| **File Operations** | Desktop Commander | Direct `edit_file` | 30x faster than MCP search |
| **Browser Automation** | BrowserBase (Smithery) | Stagehand | 95% vs 75% success |
| **Documentation** | Context7 MCP | Web search | Real-time accuracy |
| **Project Management** | TaskMaster MCP | CLI via Desktop Commander | Structured tracking |
| **Knowledge Storage** | MCP_DOCKER Memory | Cursor native memory | Persistent graph |

## üåê Browser Automation Strategy

### Updated BrowserBase Configuration (95% Success Rate)
```json
{
  "mcp-browserbase": {
    "command": "cmd",
    "args": [
      "/c", "npx", "-y", "@smithery/cli@latest", "run",
      "@browserbasehq/mcp-browserbase",
      "--key", "YOUR-API-KEY",
      "--profile", "YOUR-PROFILE-ID"
    ]
  }
}
```

### Browser Tool Capabilities Matrix

| Capability | BrowserBase | Stagehand | PowerShell |
|------------|-------------|-----------|------------|
| **Live Debug URLs** | ‚úÖ Excellent | ‚ùå None | ‚ùå None |
| **Content Extraction** | ‚úÖ JSON/Structured | ‚úÖ Text only | ‚ö†Ô∏è Limited |
| **Interactive Actions** | ‚úÖ Full support | ‚ö†Ô∏è Basic | ‚ùå None |
| **Screenshot Quality** | ‚úÖ High-res | ‚úÖ Standard | ‚ö†Ô∏è Basic |
| **Session Management** | ‚úÖ Persistent | ‚ö†Ô∏è Temporary | ‚ùå None |

### Usage Patterns

#### Complex Web Workflows (BrowserBase)
```typescript
// 1. Create session with debugging
const session = await browserbase_session_create();

// 2. Navigate and extract structured data
await browserbase_stagehand_navigate({ url: "https://example.com" });
const data = await browserbase_stagehand_extract({
  instruction: "Extract product details including price, description, and availability"
});

// 3. Perform interactive actions
await browserbase_stagehand_act({
  action: "Click the 'Add to Cart' button"
});

// 4. Debug with live URL if needed
console.log("Debug session at:", session.debugUrl);
```

#### Simple Content Extraction (Stagehand)
```typescript
// Quick text extraction
await stagehand_navigate({ url: "https://docs.example.com" });
const content = await stagehand_extract();
```

## üìÅ File Operations Strategy

### Performance Optimization Rules

**‚ö° CRITICAL: Avoid MCP Search Functions**
- `search_files` and `search_code` have 30-second timeout issues
- Use Desktop Commander PowerShell alternatives instead

### Optimized File Search Patterns

```powershell
# ‚úÖ DO: Use PowerShell via Desktop Commander (30x faster)
Get-ChildItem -Path . -Filter "*.ts" -Recurse | Select-String "pattern"

# ‚ùå DON'T: Use MCP search functions
search_files({ pattern: "*.ts" })  // 30s timeout
```

### File Operation Decision Matrix

| Operation | Recommended Tool | Performance | Example |
|-----------|------------------|-------------|---------|
| **Read File** | `read_file` | Excellent | Direct MCP tool |
| **Write File** | `write_file` | Excellent | Chunked writes |
| **Search Content** | Desktop Commander | 30x faster | PowerShell grep |
| **Find Files** | Desktop Commander | 30x faster | PowerShell find |
| **Bulk Operations** | Desktop Commander | Excellent | Scripts |

## üß† Knowledge & Research Integration

### Context7 Integration Patterns

```typescript
// 1. Resolve library documentation
const libId = await resolve_library_id({ libraryName: "Express.js" });

// 2. Get specific documentation
const docs = await get_library_docs({
  context7CompatibleLibraryID: libId,
  topic: "middleware",
  tokens: 5000
});

// 3. Use in implementation
// Apply patterns from documentation...
```

### Memory MCP Workflows

```typescript
// Store architectural decision
await create_entities({
  entities: [{
    name: "BrowserBase_Upgrade_Decision",
    entityType: "Decision",
    observations: [
      "Upgraded to Smithery CLI configuration",
      "Achieved 95% success rate vs 50% with old config",
      "Key improvement: live debug URLs and structured extraction"
    ]
  }]
});

// Create relationships
await create_relations({
  relations: [{
    from: "BrowserBase_Upgrade_Decision",
    to: "Browser_Automation_Strategy",
    relationType: "influences"
  }]
});
```

## üîß Complete Development Workflow

### Example: Feature Implementation with All Tools

```bash
# 1. Planning Phase
next_task()                                    # Get next task
get_task({ id: "7" })                         # Review details
resolve_library_id({ name: "Express.js" })    # Get docs

# 2. Research Phase
search_nodes({ query: "authentication" })      # Check existing knowledge
create_entities({ /* store new research */ })  # Save findings

# 3. Implementation Phase
read_file({ path: "src/auth.ts" })            # Review current code
write_file({ /* implement changes */ })        # Apply updates
browserbase_session_create()                   # Test in browser

# 4. Testing Phase
start_process({ command: "npm test" })         # Run tests
browserbase_stagehand_act({ /* e2e test */ }) # Browser testing

# 5. Documentation Phase
update_memory({ /* document decisions */ })    # Store knowledge
update_subtask({ id: "7.2", /* notes */ })   # Update progress
set_task_status({ id: "7.2", status: "done" }) # Mark complete
```

## ‚ö° Performance Optimization Rules

### DO: Maximize Parallel Operations
```typescript
// ‚úÖ GOOD: Parallel tool calls
Promise.all([
  read_file({ path: "config.json" }),
  read_file({ path: "package.json" }),
  get_library_docs({ id: "/express/express" })
]);

// ‚ùå BAD: Sequential calls
const config = await read_file({ path: "config.json" });
const pkg = await read_file({ path: "package.json" });
const docs = await get_library_docs({ id: "/express/express" });
```

### DO: Use Appropriate Tools for Scale
```typescript
// ‚úÖ For multiple files: Desktop Commander
await run_terminal_cmd({
  command: "Get-ChildItem -Filter '*.ts' | ForEach-Object { ... }"
});

// ‚ùå Not: Individual read_file calls in loop
for (const file of files) {
  await read_file({ path: file }); // Slow!
}
```

### DON'T: Use MCP Search for Large Codebases
```typescript
// ‚ùå BAD: Will timeout on large projects
await search_code({ pattern: "TODO" });

// ‚úÖ GOOD: Use ripgrep via Desktop Commander
await run_terminal_cmd({
  command: "rg 'TODO' --type ts"
});
```

## üêõ Debugging Workflow Patterns

### Browser Debugging with BrowserBase
1. **Create session** with debugging enabled
2. **Get live URL** from session response
3. **Watch in real-time** while automation runs
4. **Extract detailed errors** with structured queries

### Code Debugging with Integrated Tools
```typescript
// 1. Start interactive debugger
const pid = await start_process({
  command: "node --inspect-brk app.js"
});

// 2. Set up browser for debugging
const session = await browserbase_session_create();
await browserbase_stagehand_navigate({
  url: "chrome://inspect"
});

// 3. Interactive debugging session
await interact_with_process({
  pid,
  input: "breakpoint('auth.js', 42)"
});
```

## üöÄ Integration Workflow Patterns

### TaskMaster + MCP Tools Integration
```yaml
Morning Routine:
  - next_task() ‚Üí Get prioritized work
  - read_graph() ‚Üí Review project knowledge
  - list_sessions() ‚Üí Check active processes

Development Flow:
  - expand_task() ‚Üí Break down complex work
  - parallel read_file() ‚Üí Gather context
  - browserbase_session ‚Üí Test changes
  - update_subtask() ‚Üí Log progress

End of Day:
  - create_entities() ‚Üí Store learnings
  - set_task_status() ‚Üí Update completion
  - todo_write() ‚Üí Plan tomorrow
```

### Performance Metrics Achieved

| Metric | Before | After | Improvement |
|--------|--------|-------|-------------|
| **Browser Success** | 50% | 95% | +90% |
| **File Search** | 30s | 1s | 30x faster |
| **Debug Time** | 20min | 5min | 4x faster |
| **Context Load** | Sequential | Parallel | 3-5x faster |

## üìã Quick Reference Card

```bash
# File Operations
read_file()          # Single file reads
write_file()         # Chunked writes
Desktop Commander    # Search, bulk ops

# Browser Automation  
BrowserBase          # Complex workflows, debugging
Stagehand           # Simple extraction
Desktop Commander   # Quick system integration

# Knowledge Management
Context7            # Library documentation
Memory MCP          # Persistent knowledge graph
GitHub MCP          # Code context, PRs

# Process Management
start_process()     # Long-running tasks
interact_with()     # REPL interaction
Desktop Commander   # Quick commands

# Search Operations
Desktop Commander   # ALWAYS for file/code search
grep via terminal   # Pattern matching
PowerShell          # Complex queries
```

---

*Based on comprehensive testing with 95% overall success rate. Last updated with Browser MCP improvements.*
